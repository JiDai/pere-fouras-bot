/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/": {
    get: {
      responses: {
        /** OK */
        200: unknown;
      };
    };
  };
  "/poll_choice": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.poll_choice.id"];
          created_at?: parameters["rowFilter.poll_choice.created_at"];
          title?: parameters["rowFilter.poll_choice.title"];
          poll_id?: parameters["rowFilter.poll_choice.poll_id"];
          key?: parameters["rowFilter.poll_choice.key"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["poll_choice"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** poll_choice */
          poll_choice?: definitions["poll_choice"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.poll_choice.id"];
          created_at?: parameters["rowFilter.poll_choice.created_at"];
          title?: parameters["rowFilter.poll_choice.title"];
          poll_id?: parameters["rowFilter.poll_choice.poll_id"];
          key?: parameters["rowFilter.poll_choice.key"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.poll_choice.id"];
          created_at?: parameters["rowFilter.poll_choice.created_at"];
          title?: parameters["rowFilter.poll_choice.title"];
          poll_id?: parameters["rowFilter.poll_choice.poll_id"];
          key?: parameters["rowFilter.poll_choice.key"];
        };
        body: {
          /** poll_choice */
          poll_choice?: definitions["poll_choice"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/announcement": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.announcement.id"];
          created_at?: parameters["rowFilter.announcement.created_at"];
          updated_at?: parameters["rowFilter.announcement.updated_at"];
          text?: parameters["rowFilter.announcement.text"];
          active?: parameters["rowFilter.announcement.active"];
          color?: parameters["rowFilter.announcement.color"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["announcement"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** announcement */
          announcement?: definitions["announcement"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.announcement.id"];
          created_at?: parameters["rowFilter.announcement.created_at"];
          updated_at?: parameters["rowFilter.announcement.updated_at"];
          text?: parameters["rowFilter.announcement.text"];
          active?: parameters["rowFilter.announcement.active"];
          color?: parameters["rowFilter.announcement.color"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.announcement.id"];
          created_at?: parameters["rowFilter.announcement.created_at"];
          updated_at?: parameters["rowFilter.announcement.updated_at"];
          text?: parameters["rowFilter.announcement.text"];
          active?: parameters["rowFilter.announcement.active"];
          color?: parameters["rowFilter.announcement.color"];
        };
        body: {
          /** announcement */
          announcement?: definitions["announcement"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/counter": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.counter.id"];
          created_at?: parameters["rowFilter.counter.created_at"];
          name?: parameters["rowFilter.counter.name"];
          count?: parameters["rowFilter.counter.count"];
          active?: parameters["rowFilter.counter.active"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["counter"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** counter */
          counter?: definitions["counter"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.counter.id"];
          created_at?: parameters["rowFilter.counter.created_at"];
          name?: parameters["rowFilter.counter.name"];
          count?: parameters["rowFilter.counter.count"];
          active?: parameters["rowFilter.counter.active"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.counter.id"];
          created_at?: parameters["rowFilter.counter.created_at"];
          name?: parameters["rowFilter.counter.name"];
          count?: parameters["rowFilter.counter.count"];
          active?: parameters["rowFilter.counter.active"];
        };
        body: {
          /** counter */
          counter?: definitions["counter"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/poll_vote": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.poll_vote.id"];
          created_at?: parameters["rowFilter.poll_vote.created_at"];
          username?: parameters["rowFilter.poll_vote.username"];
          response?: parameters["rowFilter.poll_vote.response"];
          poll_id?: parameters["rowFilter.poll_vote.poll_id"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["poll_vote"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** poll_vote */
          poll_vote?: definitions["poll_vote"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.poll_vote.id"];
          created_at?: parameters["rowFilter.poll_vote.created_at"];
          username?: parameters["rowFilter.poll_vote.username"];
          response?: parameters["rowFilter.poll_vote.response"];
          poll_id?: parameters["rowFilter.poll_vote.poll_id"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.poll_vote.id"];
          created_at?: parameters["rowFilter.poll_vote.created_at"];
          username?: parameters["rowFilter.poll_vote.username"];
          response?: parameters["rowFilter.poll_vote.response"];
          poll_id?: parameters["rowFilter.poll_vote.poll_id"];
        };
        body: {
          /** poll_vote */
          poll_vote?: definitions["poll_vote"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/twitch_notification": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.twitch_notification.id"];
          created_at?: parameters["rowFilter.twitch_notification.created_at"];
          type?: parameters["rowFilter.twitch_notification.type"];
          payload?: parameters["rowFilter.twitch_notification.payload"];
          author?: parameters["rowFilter.twitch_notification.author"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["twitch_notification"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** twitch_notification */
          twitch_notification?: definitions["twitch_notification"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.twitch_notification.id"];
          created_at?: parameters["rowFilter.twitch_notification.created_at"];
          type?: parameters["rowFilter.twitch_notification.type"];
          payload?: parameters["rowFilter.twitch_notification.payload"];
          author?: parameters["rowFilter.twitch_notification.author"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.twitch_notification.id"];
          created_at?: parameters["rowFilter.twitch_notification.created_at"];
          type?: parameters["rowFilter.twitch_notification.type"];
          payload?: parameters["rowFilter.twitch_notification.payload"];
          author?: parameters["rowFilter.twitch_notification.author"];
        };
        body: {
          /** twitch_notification */
          twitch_notification?: definitions["twitch_notification"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/poll": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.poll.id"];
          created_at?: parameters["rowFilter.poll.created_at"];
          title?: parameters["rowFilter.poll.title"];
          active?: parameters["rowFilter.poll.active"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["poll"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** poll */
          poll?: definitions["poll"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.poll.id"];
          created_at?: parameters["rowFilter.poll.created_at"];
          title?: parameters["rowFilter.poll.title"];
          active?: parameters["rowFilter.poll.active"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.poll.id"];
          created_at?: parameters["rowFilter.poll.created_at"];
          title?: parameters["rowFilter.poll.title"];
          active?: parameters["rowFilter.poll.active"];
        };
        body: {
          /** poll */
          poll?: definitions["poll"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/chat_event": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.chat_event.id"];
          created_at?: parameters["rowFilter.chat_event.created_at"];
          type?: parameters["rowFilter.chat_event.type"];
          message?: parameters["rowFilter.chat_event.message"];
          author?: parameters["rowFilter.chat_event.author"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["chat_event"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** chat_event */
          chat_event?: definitions["chat_event"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.chat_event.id"];
          created_at?: parameters["rowFilter.chat_event.created_at"];
          type?: parameters["rowFilter.chat_event.type"];
          message?: parameters["rowFilter.chat_event.message"];
          author?: parameters["rowFilter.chat_event.author"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.chat_event.id"];
          created_at?: parameters["rowFilter.chat_event.created_at"];
          type?: parameters["rowFilter.chat_event.type"];
          message?: parameters["rowFilter.chat_event.message"];
          author?: parameters["rowFilter.chat_event.author"];
        };
        body: {
          /** chat_event */
          chat_event?: definitions["chat_event"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/command": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.command.id"];
          created_at?: parameters["rowFilter.command.created_at"];
          name?: parameters["rowFilter.command.name"];
          updated_at?: parameters["rowFilter.command.updated_at"];
          /** Message to display for chat command */
          message?: parameters["rowFilter.command.message"];
          active?: parameters["rowFilter.command.active"];
          permission?: parameters["rowFilter.command.permission"];
          /** Connected to a TS module */
          module?: parameters["rowFilter.command.module"];
          type?: parameters["rowFilter.command.type"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["command"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** command */
          command?: definitions["command"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.command.id"];
          created_at?: parameters["rowFilter.command.created_at"];
          name?: parameters["rowFilter.command.name"];
          updated_at?: parameters["rowFilter.command.updated_at"];
          /** Message to display for chat command */
          message?: parameters["rowFilter.command.message"];
          active?: parameters["rowFilter.command.active"];
          permission?: parameters["rowFilter.command.permission"];
          /** Connected to a TS module */
          module?: parameters["rowFilter.command.module"];
          type?: parameters["rowFilter.command.type"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.command.id"];
          created_at?: parameters["rowFilter.command.created_at"];
          name?: parameters["rowFilter.command.name"];
          updated_at?: parameters["rowFilter.command.updated_at"];
          /** Message to display for chat command */
          message?: parameters["rowFilter.command.message"];
          active?: parameters["rowFilter.command.active"];
          permission?: parameters["rowFilter.command.permission"];
          /** Connected to a TS module */
          module?: parameters["rowFilter.command.module"];
          type?: parameters["rowFilter.command.type"];
        };
        body: {
          /** command */
          command?: definitions["command"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/planning": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.planning.id"];
          created_at?: parameters["rowFilter.planning.created_at"];
          day?: parameters["rowFilter.planning.day"];
          hour?: parameters["rowFilter.planning.hour"];
          title?: parameters["rowFilter.planning.title"];
          active?: parameters["rowFilter.planning.active"];
          picture_url?: parameters["rowFilter.planning.picture_url"];
          game_id?: parameters["rowFilter.planning.game_id"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["planning"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** planning */
          planning?: definitions["planning"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.planning.id"];
          created_at?: parameters["rowFilter.planning.created_at"];
          day?: parameters["rowFilter.planning.day"];
          hour?: parameters["rowFilter.planning.hour"];
          title?: parameters["rowFilter.planning.title"];
          active?: parameters["rowFilter.planning.active"];
          picture_url?: parameters["rowFilter.planning.picture_url"];
          game_id?: parameters["rowFilter.planning.game_id"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.planning.id"];
          created_at?: parameters["rowFilter.planning.created_at"];
          day?: parameters["rowFilter.planning.day"];
          hour?: parameters["rowFilter.planning.hour"];
          title?: parameters["rowFilter.planning.title"];
          active?: parameters["rowFilter.planning.active"];
          picture_url?: parameters["rowFilter.planning.picture_url"];
          game_id?: parameters["rowFilter.planning.game_id"];
        };
        body: {
          /** planning */
          planning?: definitions["planning"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/command_label": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.command_label.id"];
          created_at?: parameters["rowFilter.command_label.created_at"];
          updated_at?: parameters["rowFilter.command_label.updated_at"];
          command_id?: parameters["rowFilter.command_label.command_id"];
          label?: parameters["rowFilter.command_label.label"];
          language?: parameters["rowFilter.command_label.language"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["command_label"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** command_label */
          command_label?: definitions["command_label"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.command_label.id"];
          created_at?: parameters["rowFilter.command_label.created_at"];
          updated_at?: parameters["rowFilter.command_label.updated_at"];
          command_id?: parameters["rowFilter.command_label.command_id"];
          label?: parameters["rowFilter.command_label.label"];
          language?: parameters["rowFilter.command_label.language"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.command_label.id"];
          created_at?: parameters["rowFilter.command_label.created_at"];
          updated_at?: parameters["rowFilter.command_label.updated_at"];
          command_id?: parameters["rowFilter.command_label.command_id"];
          label?: parameters["rowFilter.command_label.label"];
          language?: parameters["rowFilter.command_label.language"];
        };
        body: {
          /** command_label */
          command_label?: definitions["command_label"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/game": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.game.id"];
          created_at?: parameters["rowFilter.game.created_at"];
          updated_at?: parameters["rowFilter.game.updated_at"];
          igdb_id?: parameters["rowFilter.game.igdb_id"];
          description?: parameters["rowFilter.game.description"];
          active?: parameters["rowFilter.game.active"];
          youtube_url?: parameters["rowFilter.game.youtube_url"];
          twitch_id?: parameters["rowFilter.game.twitch_id"];
          status?: parameters["rowFilter.game.status"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["game"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** game */
          game?: definitions["game"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.game.id"];
          created_at?: parameters["rowFilter.game.created_at"];
          updated_at?: parameters["rowFilter.game.updated_at"];
          igdb_id?: parameters["rowFilter.game.igdb_id"];
          description?: parameters["rowFilter.game.description"];
          active?: parameters["rowFilter.game.active"];
          youtube_url?: parameters["rowFilter.game.youtube_url"];
          twitch_id?: parameters["rowFilter.game.twitch_id"];
          status?: parameters["rowFilter.game.status"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.game.id"];
          created_at?: parameters["rowFilter.game.created_at"];
          updated_at?: parameters["rowFilter.game.updated_at"];
          igdb_id?: parameters["rowFilter.game.igdb_id"];
          description?: parameters["rowFilter.game.description"];
          active?: parameters["rowFilter.game.active"];
          youtube_url?: parameters["rowFilter.game.youtube_url"];
          twitch_id?: parameters["rowFilter.game.twitch_id"];
          status?: parameters["rowFilter.game.status"];
        };
        body: {
          /** game */
          game?: definitions["game"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/pf_answer": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.pf_answer.id"];
          created_at?: parameters["rowFilter.pf_answer.created_at"];
          question_id?: parameters["rowFilter.pf_answer.question_id"];
          username?: parameters["rowFilter.pf_answer.username"];
          answer?: parameters["rowFilter.pf_answer.answer"];
          valid?: parameters["rowFilter.pf_answer.valid"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["pf_answer"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** pf_answer */
          pf_answer?: definitions["pf_answer"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.pf_answer.id"];
          created_at?: parameters["rowFilter.pf_answer.created_at"];
          question_id?: parameters["rowFilter.pf_answer.question_id"];
          username?: parameters["rowFilter.pf_answer.username"];
          answer?: parameters["rowFilter.pf_answer.answer"];
          valid?: parameters["rowFilter.pf_answer.valid"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.pf_answer.id"];
          created_at?: parameters["rowFilter.pf_answer.created_at"];
          question_id?: parameters["rowFilter.pf_answer.question_id"];
          username?: parameters["rowFilter.pf_answer.username"];
          answer?: parameters["rowFilter.pf_answer.answer"];
          valid?: parameters["rowFilter.pf_answer.valid"];
        };
        body: {
          /** pf_answer */
          pf_answer?: definitions["pf_answer"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/rpc/poll_result_rpc": {
    post: {
      parameters: {
        body: {
          args: {
            /** Format: bigint */
            poll_id: number;
          };
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferParams"];
        };
      };
      responses: {
        /** OK */
        200: unknown;
      };
    };
  };
  "/rpc/vote_result_rpc": {
    post: {
      parameters: {
        body: {
          args: {
            /** Format: bigint */
            vote_id: number;
          };
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferParams"];
        };
      };
      responses: {
        /** OK */
        200: unknown;
      };
    };
  };
}

export interface definitions {
  poll_choice: {
    /**
     * Format: bigint
     * @description Note:
     * This is a Primary Key.<pk/>
     */
    id: number;
    /**
     * Format: timestamp with time zone
     * @default now()
     */
    created_at?: string;
    /** Format: text */
    title?: string;
    /**
     * Format: bigint
     * @description Note:
     * This is a Foreign Key to `poll.id`.<fk table='poll' column='id'/>
     */
    poll_id?: number;
    /** Format: text */
    key?: string;
  };
  announcement: {
    /**
     * Format: bigint
     * @description Note:
     * This is a Primary Key.<pk/>
     */
    id: number;
    /**
     * Format: timestamp with time zone
     * @default now()
     */
    created_at?: string;
    /** Format: timestamp with time zone */
    updated_at?: string;
    /** Format: text */
    text: string;
    /**
     * Format: boolean
     * @default true
     */
    active: boolean;
    /**
     * Format: public.announcement_color
     * @enum {string}
     */
    color?: "blue" | "green" | "orange" | "purple";
  };
  counter: {
    /**
     * Format: bigint
     * @description Note:
     * This is a Primary Key.<pk/>
     */
    id: number;
    /**
     * Format: timestamp with time zone
     * @default now()
     */
    created_at?: string;
    /** Format: character varying */
    name?: string;
    /**
     * Format: integer
     * @default 0
     */
    count?: number;
    /**
     * Format: boolean
     * @default false
     */
    active?: boolean;
  };
  poll_vote: {
    /**
     * Format: bigint
     * @description Note:
     * This is a Primary Key.<pk/>
     */
    id: number;
    /**
     * Format: timestamp with time zone
     * @default now()
     */
    created_at?: string;
    /** Format: text */
    username?: string;
    /** Format: text */
    response?: string;
    /**
     * Format: bigint
     * @description Note:
     * This is a Foreign Key to `poll.id`.<fk table='poll' column='id'/>
     */
    poll_id?: number;
  };
  twitch_notification: {
    /**
     * Format: bigint
     * @description Note:
     * This is a Primary Key.<pk/>
     */
    id: number;
    /**
     * Format: timestamp with time zone
     * @default now()
     */
    created_at?: string;
    /** Format: character varying */
    type?: string;
    /** Format: json */
    payload?: unknown;
    /** Format: character varying */
    author?: string;
  };
  poll: {
    /**
     * Format: bigint
     * @description Note:
     * This is a Primary Key.<pk/>
     */
    id: number;
    /**
     * Format: timestamp with time zone
     * @default now()
     */
    created_at?: string;
    /** Format: text */
    title?: string;
    /**
     * Format: boolean
     * @default true
     */
    active: boolean;
  };
  chat_event: {
    /**
     * Format: bigint
     * @description Note:
     * This is a Primary Key.<pk/>
     */
    id: number;
    /**
     * Format: timestamp with time zone
     * @default now()
     */
    created_at?: string;
    /**
     * Format: public.chat_event_type
     * @enum {string}
     */
    type?: "command" | "session_message" | "sub" | "follow";
    /** Format: text */
    message?: string;
    /** Format: character varying */
    author: string;
  };
  /** @description Stream command list */
  command: {
    /**
     * Format: bigint
     * @description Note:
     * This is a Primary Key.<pk/>
     */
    id: number;
    /**
     * Format: timestamp without time zone
     * @default now()
     */
    created_at?: string;
    /** Format: character varying */
    name: string;
    /** Format: timestamp without time zone */
    updated_at?: string;
    /**
     * Format: text
     * @description Message to display for chat command
     */
    message?: string;
    /**
     * Format: boolean
     * @default true
     */
    active: boolean;
    /**
     * Format: public.command_permission
     * @enum {string}
     */
    permission?: "sub" | "mod" | "broadcaster";
    /**
     * Format: boolean
     * @description Connected to a TS module
     * @default false
     */
    module: boolean;
    /**
     * Format: public.command_type
     * @default chat
     * @enum {string}
     */
    type: "chat" | "sound_alert" | "visual_alert";
  };
  planning: {
    /**
     * Format: bigint
     * @description Note:
     * This is a Primary Key.<pk/>
     */
    id: number;
    /**
     * Format: timestamp with time zone
     * @default now()
     */
    created_at?: string;
    /**
     * Format: public.planning_day
     * @enum {string}
     */
    day?:
      | "lundi"
      | "mardi"
      | "mercredi"
      | "jeudi"
      | "vendredi"
      | "samedi"
      | "dimanche";
    /** Format: integer */
    hour?: number;
    /** Format: text */
    title?: string;
    /**
     * Format: boolean
     * @default true
     */
    active: boolean;
    /** Format: character varying */
    picture_url?: string;
    /**
     * Format: bigint
     * @description Note:
     * This is a Foreign Key to `game.id`.<fk table='game' column='id'/>
     */
    game_id?: number;
  };
  command_label: {
    /**
     * Format: bigint
     * @description Note:
     * This is a Primary Key.<pk/>
     */
    id: number;
    /**
     * Format: timestamp with time zone
     * @default now()
     */
    created_at?: string;
    /** Format: timestamp with time zone */
    updated_at?: string;
    /**
     * Format: bigint
     * @description Note:
     * This is a Foreign Key to `command.id`.<fk table='command' column='id'/>
     */
    command_id?: number;
    /** Format: text */
    label?: string;
    /** Format: text */
    language?: string;
  };
  game: {
    /**
     * Format: bigint
     * @description Note:
     * This is a Primary Key.<pk/>
     */
    id: number;
    /**
     * Format: timestamp without time zone
     * @default now()
     */
    created_at: string;
    /** Format: timestamp without time zone */
    updated_at?: string;
    /** Format: bigint */
    igdb_id?: number;
    /** Format: text */
    description?: string;
    /**
     * Format: boolean
     * @default true
     */
    active: boolean;
    /** Format: character varying */
    youtube_url?: string;
    /** Format: bigint */
    twitch_id?: number;
    /**
     * Format: public.game_status
     * @default todo
     * @enum {string}
     */
    status: "todo" | "playing" | "finished";
  };
  pf_answer: {
    /**
     * Format: bigint
     * @description Note:
     * This is a Primary Key.<pk/>
     */
    id: number;
    /**
     * Format: timestamp with time zone
     * @default now()
     */
    created_at?: string;
    /** Format: uuid */
    question_id?: string;
    /** Format: text */
    username?: string;
    /** Format: text */
    answer?: string;
    /**
     * Format: boolean
     * @default false
     */
    valid: boolean;
  };
}

export interface parameters {
  /**
   * @description Preference
   * @enum {string}
   */
  preferParams: "params=single-object";
  /**
   * @description Preference
   * @enum {string}
   */
  preferReturn: "return=representation" | "return=minimal" | "return=none";
  /**
   * @description Preference
   * @enum {string}
   */
  preferCount: "count=none";
  /** @description Filtering Columns */
  select: string;
  /** @description On Conflict */
  on_conflict: string;
  /** @description Ordering */
  order: string;
  /** @description Limiting and Pagination */
  range: string;
  /**
   * @description Limiting and Pagination
   * @default items
   */
  rangeUnit: string;
  /** @description Limiting and Pagination */
  offset: string;
  /** @description Limiting and Pagination */
  limit: string;
  /** @description poll_choice */
  "body.poll_choice": definitions["poll_choice"];
  /** Format: bigint */
  "rowFilter.poll_choice.id": string;
  /** Format: timestamp with time zone */
  "rowFilter.poll_choice.created_at": string;
  /** Format: text */
  "rowFilter.poll_choice.title": string;
  /** Format: bigint */
  "rowFilter.poll_choice.poll_id": string;
  /** Format: text */
  "rowFilter.poll_choice.key": string;
  /** @description announcement */
  "body.announcement": definitions["announcement"];
  /** Format: bigint */
  "rowFilter.announcement.id": string;
  /** Format: timestamp with time zone */
  "rowFilter.announcement.created_at": string;
  /** Format: timestamp with time zone */
  "rowFilter.announcement.updated_at": string;
  /** Format: text */
  "rowFilter.announcement.text": string;
  /** Format: boolean */
  "rowFilter.announcement.active": string;
  /** Format: public.announcement_color */
  "rowFilter.announcement.color": string;
  /** @description counter */
  "body.counter": definitions["counter"];
  /** Format: bigint */
  "rowFilter.counter.id": string;
  /** Format: timestamp with time zone */
  "rowFilter.counter.created_at": string;
  /** Format: character varying */
  "rowFilter.counter.name": string;
  /** Format: integer */
  "rowFilter.counter.count": string;
  /** Format: boolean */
  "rowFilter.counter.active": string;
  /** @description poll_vote */
  "body.poll_vote": definitions["poll_vote"];
  /** Format: bigint */
  "rowFilter.poll_vote.id": string;
  /** Format: timestamp with time zone */
  "rowFilter.poll_vote.created_at": string;
  /** Format: text */
  "rowFilter.poll_vote.username": string;
  /** Format: text */
  "rowFilter.poll_vote.response": string;
  /** Format: bigint */
  "rowFilter.poll_vote.poll_id": string;
  /** @description twitch_notification */
  "body.twitch_notification": definitions["twitch_notification"];
  /** Format: bigint */
  "rowFilter.twitch_notification.id": string;
  /** Format: timestamp with time zone */
  "rowFilter.twitch_notification.created_at": string;
  /** Format: character varying */
  "rowFilter.twitch_notification.type": string;
  /** Format: json */
  "rowFilter.twitch_notification.payload": string;
  /** Format: character varying */
  "rowFilter.twitch_notification.author": string;
  /** @description poll */
  "body.poll": definitions["poll"];
  /** Format: bigint */
  "rowFilter.poll.id": string;
  /** Format: timestamp with time zone */
  "rowFilter.poll.created_at": string;
  /** Format: text */
  "rowFilter.poll.title": string;
  /** Format: boolean */
  "rowFilter.poll.active": string;
  /** @description chat_event */
  "body.chat_event": definitions["chat_event"];
  /** Format: bigint */
  "rowFilter.chat_event.id": string;
  /** Format: timestamp with time zone */
  "rowFilter.chat_event.created_at": string;
  /** Format: public.chat_event_type */
  "rowFilter.chat_event.type": string;
  /** Format: text */
  "rowFilter.chat_event.message": string;
  /** Format: character varying */
  "rowFilter.chat_event.author": string;
  /** @description command */
  "body.command": definitions["command"];
  /** Format: bigint */
  "rowFilter.command.id": string;
  /** Format: timestamp without time zone */
  "rowFilter.command.created_at": string;
  /** Format: character varying */
  "rowFilter.command.name": string;
  /** Format: timestamp without time zone */
  "rowFilter.command.updated_at": string;
  /**
   * Format: text
   * @description Message to display for chat command
   */
  "rowFilter.command.message": string;
  /** Format: boolean */
  "rowFilter.command.active": string;
  /** Format: public.command_permission */
  "rowFilter.command.permission": string;
  /**
   * Format: boolean
   * @description Connected to a TS module
   */
  "rowFilter.command.module": string;
  /** Format: public.command_type */
  "rowFilter.command.type": string;
  /** @description planning */
  "body.planning": definitions["planning"];
  /** Format: bigint */
  "rowFilter.planning.id": string;
  /** Format: timestamp with time zone */
  "rowFilter.planning.created_at": string;
  /** Format: public.planning_day */
  "rowFilter.planning.day": string;
  /** Format: integer */
  "rowFilter.planning.hour": string;
  /** Format: text */
  "rowFilter.planning.title": string;
  /** Format: boolean */
  "rowFilter.planning.active": string;
  /** Format: character varying */
  "rowFilter.planning.picture_url": string;
  /** Format: bigint */
  "rowFilter.planning.game_id": string;
  /** @description command_label */
  "body.command_label": definitions["command_label"];
  /** Format: bigint */
  "rowFilter.command_label.id": string;
  /** Format: timestamp with time zone */
  "rowFilter.command_label.created_at": string;
  /** Format: timestamp with time zone */
  "rowFilter.command_label.updated_at": string;
  /** Format: bigint */
  "rowFilter.command_label.command_id": string;
  /** Format: text */
  "rowFilter.command_label.label": string;
  /** Format: text */
  "rowFilter.command_label.language": string;
  /** @description game */
  "body.game": definitions["game"];
  /** Format: bigint */
  "rowFilter.game.id": string;
  /** Format: timestamp without time zone */
  "rowFilter.game.created_at": string;
  /** Format: timestamp without time zone */
  "rowFilter.game.updated_at": string;
  /** Format: bigint */
  "rowFilter.game.igdb_id": string;
  /** Format: text */
  "rowFilter.game.description": string;
  /** Format: boolean */
  "rowFilter.game.active": string;
  /** Format: character varying */
  "rowFilter.game.youtube_url": string;
  /** Format: bigint */
  "rowFilter.game.twitch_id": string;
  /** Format: public.game_status */
  "rowFilter.game.status": string;
  /** @description pf_answer */
  "body.pf_answer": definitions["pf_answer"];
  /** Format: bigint */
  "rowFilter.pf_answer.id": string;
  /** Format: timestamp with time zone */
  "rowFilter.pf_answer.created_at": string;
  /** Format: uuid */
  "rowFilter.pf_answer.question_id": string;
  /** Format: text */
  "rowFilter.pf_answer.username": string;
  /** Format: text */
  "rowFilter.pf_answer.answer": string;
  /** Format: boolean */
  "rowFilter.pf_answer.valid": string;
}

export interface operations {}

export interface external {}
